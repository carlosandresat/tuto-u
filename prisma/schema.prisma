// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String                     @id @default(cuid())
  firstname       String?
  lastname        String?
  email           String?                    @unique
  emailVerified   DateTime?                  @map("email_verified")
  image           String?
  password        String?
  description     String?
  accounts        Account[]
  sessions        Session[]
  tutor_pricing   UserPricingConfiguration[]
  tutorCourses    TutorCourse[]
  availabilities  TutorAvailability[]
  studentSessions IndividualSession[]        @relation("StudentSession")
  tutorSessions   IndividualSession[]        @relation("TutorSession")
  userAchievements UserAchievement[]

  createdAt DateTime @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Preregister {
  id       String  @id @default(cuid())
  gender   String?
  role     String?
  school   String?
  semester String?
}

model UserPricingConfiguration {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  duration Int
  price    Decimal
  tutor    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_pricing_configuration")
}

model TutorCourse {
  id       Int    @id @default(autoincrement())
  tutorId  String @map("tutor_id")
  courseId Int    @map("course_id")
  tutor    User   @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("tutor_courses")
}

model Course {
  id                 Int                 @id @default(autoincrement())
  name               String
  schoolId           Int                 @map("school_id")
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tutorCourses       TutorCourse[]
  individualSessions IndividualSession[]

  @@map("courses")
}

model School {
  id      Int      @id @default(autoincrement())
  name    String
  code    String
  courses Course[]

  @@map("schools")
}

model TutorAvailability {
  id        Int    @id @default(autoincrement())
  tutorId   String @map("tutor_id")
  dayOfWeek Int    @map("day_of_week") @db.SmallInt
  timeSlot  Int    @map("time_slot") @db.SmallInt
  tutor     User   @relation(fields: [tutorId], references: [id])

  @@map("tutor_availability")
}

model IndividualSession {
  id              Int      @id @default(autoincrement())
  studentId       String   @map("student_id")
  tutorId         String   @map("tutor_id")
  courseId        Int      @map("course_id")
  sessionDateTime DateTime @map("session_date_time") // Combined date and time of the session
  duration        Int      @db.SmallInt
  price           Decimal  @db.Decimal(5, 2)// Price agreed upon for the session
  place           String? // Optional: for in-person sessions
  online          Boolean // Whether the session is online
  topic           String // Optional: topic or focus area for the session
  status          String // Status of the session e.g., "scheduled", "completed", "cancelled"
  studentRating   Decimal?   @db.Decimal(2, 1) @map("student_rating") // Rating given by the student, range 0-5
  studentComment  String?  @map("student_comment") // Optional comment provided by the student
  tutorRating     Decimal?  @db.Decimal(2, 1) @map("tutort_rating") // Rating given by the tutor, range 0-5
  tutorComment    String?  @map("tutor_comment") // Optional comment provided by the tutor
  createdAt       DateTime @default(now())


  student User   @relation(name: "StudentSession", fields: [studentId], references: [id])
  tutor   User   @relation(name: "TutorSession", fields: [tutorId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@map("individual_sessions")
}

model Achievement {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  tier        String   // Ejemplo: "Bronze", "Silver", "Gold"
  imageUrl    String   @map("image_url")// URL a una imagen representativa del logro
  isInverted  Boolean  @map("is_inverted")

  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        String      @map("user_id")
  achievementId Int         @map("achievement_id")
  achievedDate  DateTime    @map("achieved_date") @default(now()) // Fecha cuando el logro fue obtenido

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@map("user_achievements")
}