// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String                     @id @default(cuid())
  firstname     String?
  lastname      String?
  email         String?                    @unique
  emailVerified DateTime?                  @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  tutor_pricing UserPricingConfiguration[]
  tutorCourses  TutorCourse[]

  createdAt DateTime @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Preregister {
  id       String  @id @default(cuid())
  gender   String?
  role     String?
  school   String?
  semester String?
}

model UserPricingConfiguration {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  duration Int
  price    Decimal
  tutor    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_pricing_configuration")
}

model TutorCourse {
  id       Int    @id @default(autoincrement())
  tutorId  String @map("tutor_id")
  courseId Int    @map("course_id")
  tutor    User   @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("tutor_courses")
}

model Course {
  id           Int            @id @default(autoincrement())
  name         String
  schoolId     Int            @map("school_id")
  school       School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tutorCourses TutorCourse[]
  
  @@map("courses")

}

model School {
  id      Int      @id @default(autoincrement())
  name    String
  code    String
  courses Course[]

  @@map("schools")
}
